# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: backend
# app and org for use with dashboard.serverless.com
app: backend
org: gregtrifan

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs12.x
  region: us-east-1
  environment:
    DYNAMODB_NAMESPACE: ${opt:stage, "dev"}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/*"

plugins:
  - serverless-plugin-typescript
  - serverless-plugin-monorepo
  - serverless-offline
package:
  exclude:
    - test/**
    - coverage/**
functions:
  uploadGame:
    handler: src/Game/upload.handler
    events:
      - http:
          method: POST
          path: /api/game
          cors: true
          request:
            schemas:
              application/json: ${file(models/upload-game-model.json)}

  getGames:
    handler: src/Game/list.handler
    events:
      - http:
          method: GET
          path: /api/games
          cors: true

  getGame:
    handler: src/Game/get.handler
    events:
      - http:
          method: GET
          path: /api/game/{session}
          cors: true

  listPlayers:
    handler: src/Players/list.handler
    events:
      - http:
          method: GET
          path: /api/players
          cors: true

custom:
  # serverless offline plugin setup
  serverless-offline:
    httpPort: 4000
resources:
  Resources:
    GamesDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: N
          - AttributeName: score1
            AttributeType: N
          - AttributeName: score2
            AttributeType: N
          - AttributeName: player1
            AttributeType: S
          - AttributeName: player2
            AttributeType: S
        KeySchema:
          - AttributeName: slug
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: realworld-${self:provider.environment.DYNAMODB_NAMESPACE}-players

    PlayersDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: name
            AttributeType: S
          - AttributeName: wins
            AttributeType: N
        KeySchema:
          - AttributeName: name
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: realworld-${self:provider.environment.DYNAMODB_NAMESPACE}-players
        GlobalSecondaryIndexes:
          - IndexName: winners
            KeySchema:
              - AttributeName: wins
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
